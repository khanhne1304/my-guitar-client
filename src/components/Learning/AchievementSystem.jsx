import React, { useState, useEffect } from 'react';
import styles from './AchievementSystem.module.css';

/**
 * AchievementSystem Component
 * H·ªá th·ªëng th√†nh t√≠ch v√† huy hi·ªáu cho ng∆∞·ªùi h·ªçc
 */
export default function AchievementSystem({ achievements = [], onClose }) {
  const [allAchievements, setAllAchievements] = useState([]);
  const [filter, setFilter] = useState('all');
  const [showNewAchievement, setShowNewAchievement] = useState(null);

  // Predefined achievements
  const predefinedAchievements = [
    {
      id: 'first_lesson',
      name: 'B∆∞·ªõc ƒë·∫ßu ti√™n',
      description: 'Ho√†n th√†nh b√†i h·ªçc ƒë·∫ßu ti√™n',
      icon: 'üéØ',
      points: 50,
      category: 'learning',
      rarity: 'common'
    },
    {
      id: 'first_10',
      name: 'Ng∆∞·ªùi h·ªçc chƒÉm ch·ªâ',
      description: 'Ho√†n th√†nh 10 b√†i t·∫≠p ƒë·∫ßu ti√™n',
      icon: 'üìö',
      points: 100,
      category: 'learning',
      rarity: 'common'
    },
    {
      id: 'accuracy_master',
      name: 'B·∫≠c th·∫ßy ƒë·ªô ch√≠nh x√°c',
      description: 'ƒê·∫°t ƒë·ªô ch√≠nh x√°c 90%',
      icon: 'üéØ',
      points: 200,
      category: 'skill',
      rarity: 'rare'
    },
    {
      id: 'streak_master',
      name: 'Chu·ªói th√†nh c√¥ng',
      description: 'ƒê·∫°t chu·ªói 5 l·∫ßn li√™n ti·∫øp',
      icon: 'üî•',
      points: 150,
      category: 'skill',
      rarity: 'uncommon'
    },
    {
      id: 'time_master',
      name: 'Ng∆∞·ªùi ki√™n tr√¨',
      description: 'D√†nh 1 gi·ªù luy·ªán t·∫≠p',
      icon: '‚è∞',
      points: 100,
      category: 'dedication',
      rarity: 'common'
    },
    {
      id: 'metronome_master',
      name: 'Vua nh·ªãp ƒëi·ªáu',
      description: 'S·ª≠ d·ª•ng metronome 30 ph√∫t',
      icon: 'ü•Å',
      points: 150,
      category: 'skill',
      rarity: 'uncommon'
    },
    {
      id: 'pitch_perfect',
      name: 'Cao ƒë·ªô ho√†n h·∫£o',
      description: 'Ph√°t hi·ªán cao ƒë·ªô ch√≠nh x√°c 20 l·∫ßn',
      icon: 'üéµ',
      points: 200,
      category: 'skill',
      rarity: 'rare'
    },
    {
      id: 'speed_demon',
      name: 'T·ªëc ƒë·ªô th·∫ßn th√°nh',
      description: 'Ho√†n th√†nh b√†i t·∫≠p v·ªõi t·ªëc ƒë·ªô cao',
      icon: '‚ö°',
      points: 300,
      category: 'skill',
      rarity: 'epic'
    },
    {
      id: 'perfectionist',
      name: 'Ng∆∞·ªùi ho√†n h·∫£o',
      description: 'ƒê·∫°t 100% ƒë·ªô ch√≠nh x√°c',
      icon: 'üíé',
      points: 500,
      category: 'skill',
      rarity: 'legendary'
    },
    {
      id: 'dedicated_learner',
      name: 'H·ªçc vi√™n t·∫≠n t·ª•y',
      description: 'Luy·ªán t·∫≠p 7 ng√†y li√™n ti·∫øp',
      icon: 'üìÖ',
      points: 300,
      category: 'dedication',
      rarity: 'epic'
    }
  ];

  // Initialize achievements
  useEffect(() => {
    const achievementsWithStatus = predefinedAchievements.map(achievement => ({
      ...achievement,
      earned: achievements.some(earned => earned.id === achievement.id),
      earnedAt: achievements.find(earned => earned.id === achievement.id)?.earnedAt
    }));
    
    setAllAchievements(achievementsWithStatus);
  }, [achievements]);

  // Show new achievement animation
  useEffect(() => {
    const newAchievement = achievements.find(achievement => 
      !achievements.some(prev => prev.id === achievement.id)
    );
    
    if (newAchievement) {
      setShowNewAchievement(newAchievement);
      setTimeout(() => setShowNewAchievement(null), 3000);
    }
  }, [achievements]);

  // Filter achievements
  const filteredAchievements = allAchievements.filter(achievement => {
    if (filter === 'all') return true;
    if (filter === 'earned') return achievement.earned;
    if (filter === 'unearned') return !achievement.earned;
    return achievement.category === filter;
  });

  // Get rarity color
  const getRarityColor = (rarity) => {
    const colors = {
      common: '#6b7280',
      uncommon: '#10b981',
      rare: '#3b82f6',
      epic: '#8b5cf6',
      legendary: '#f59e0b'
    };
    return colors[rarity] || colors.common;
  };

  // Get category label
  const getCategoryLabel = (category) => {
    const labels = {
      learning: 'H·ªçc t·∫≠p',
      skill: 'K·ªπ nƒÉng',
      dedication: 'Ki√™n tr√¨'
    };
    return labels[category] || category;
  };

  // Get total points
  const totalPoints = achievements.reduce((total, achievement) => 
    total + (achievement.points || 0), 0
  );

  // Get earned count
  const earnedCount = allAchievements.filter(a => a.earned).length;
  const totalCount = allAchievements.length;

  return (
    <div className={styles.achievementSystem}>
      {/* Header */}
      <div className={styles.achievementSystem__header}>
        <div className={styles.achievementSystem__title}>
          <h2>üèÜ H·ªá th·ªëng th√†nh t√≠ch</h2>
          <div className={styles.achievementSystem__stats}>
            <span className={styles.achievementSystem__stat}>
              {earnedCount}/{totalCount} th√†nh t√≠ch
            </span>
            <span className={styles.achievementSystem__stat}>
              {totalPoints} ƒëi·ªÉm
            </span>
          </div>
        </div>
        
        {onClose && (
          <button
            onClick={onClose}
            className={styles.achievementSystem__closeButton}
          >
            ‚úï
          </button>
        )}
      </div>

      {/* Filters */}
      <div className={styles.achievementSystem__filters}>
        <button
          className={`${styles.achievementSystem__filter} ${filter === 'all' ? styles.active : ''}`}
          onClick={() => setFilter('all')}
        >
          T·∫•t c·∫£
        </button>
        <button
          className={`${styles.achievementSystem__filter} ${filter === 'earned' ? styles.active : ''}`}
          onClick={() => setFilter('earned')}
        >
          ƒê√£ ƒë·∫°t
        </button>
        <button
          className={`${styles.achievementSystem__filter} ${filter === 'unearned' ? styles.active : ''}`}
          onClick={() => setFilter('unearned')}
        >
          Ch∆∞a ƒë·∫°t
        </button>
        <button
          className={`${styles.achievementSystem__filter} ${filter === 'learning' ? styles.active : ''}`}
          onClick={() => setFilter('learning')}
        >
          H·ªçc t·∫≠p
        </button>
        <button
          className={`${styles.achievementSystem__filter} ${filter === 'skill' ? styles.active : ''}`}
          onClick={() => setFilter('skill')}
        >
          K·ªπ nƒÉng
        </button>
        <button
          className={`${styles.achievementSystem__filter} ${filter === 'dedication' ? styles.active : ''}`}
          onClick={() => setFilter('dedication')}
        >
          Ki√™n tr√¨
        </button>
      </div>

      {/* Achievements Grid */}
      <div className={styles.achievementSystem__grid}>
        {filteredAchievements.map((achievement) => (
          <div
            key={achievement.id}
            className={`${styles.achievementSystem__achievement} ${
              achievement.earned ? styles.earned : styles.unearned
            } ${showNewAchievement?.id === achievement.id ? styles.new : ''}`}
          >
            <div className={styles.achievementSystem__achievementIcon}>
              {achievement.earned ? achievement.icon : 'üîí'}
            </div>
            
            <div className={styles.achievementSystem__achievementContent}>
              <div className={styles.achievementSystem__achievementHeader}>
                <h3 className={styles.achievementSystem__achievementName}>
                  {achievement.name}
                </h3>
                <div className={styles.achievementSystem__achievementBadges}>
                  <span 
                    className={styles.achievementSystem__rarityBadge}
                    style={{ backgroundColor: getRarityColor(achievement.rarity) }}
                  >
                    {achievement.rarity}
                  </span>
                  <span className={styles.achievementSystem__categoryBadge}>
                    {getCategoryLabel(achievement.category)}
                  </span>
                </div>
              </div>
              
              <p className={styles.achievementSystem__achievementDescription}>
                {achievement.description}
              </p>
              
              <div className={styles.achievementSystem__achievementFooter}>
                <span className={styles.achievementSystem__points}>
                  +{achievement.points} ƒëi·ªÉm
                </span>
                {achievement.earned && achievement.earnedAt && (
                  <span className={styles.achievementSystem__earnedDate}>
                    ƒê·∫°t ƒë∆∞·ª£c: {new Date(achievement.earnedAt).toLocaleDateString('vi-VN')}
                  </span>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>

      {/* Progress Bar */}
      <div className={styles.achievementSystem__progress}>
        <div className={styles.achievementSystem__progressHeader}>
          <span>Ti·∫øn ƒë·ªô th√†nh t√≠ch</span>
          <span>{earnedCount}/{totalCount}</span>
        </div>
        <div className={styles.achievementSystem__progressBar}>
          <div 
            className={styles.achievementSystem__progressFill}
            style={{ width: `${(earnedCount / totalCount) * 100}%` }}
          />
        </div>
      </div>

      {/* New Achievement Notification */}
      {showNewAchievement && (
        <div className={styles.achievementSystem__notification}>
          <div className={styles.achievementSystem__notificationContent}>
            <div className={styles.achievementSystem__notificationIcon}>
              {showNewAchievement.icon}
            </div>
            <div className={styles.achievementSystem__notificationText}>
              <h4>Th√†nh t√≠ch m·ªõi!</h4>
              <p>{showNewAchievement.name}</p>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}



