// src/views/pages/checkout/Checkout.jsx
import { useMemo, useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import styles from './checkout.module.css';

import Header from '../../components/HomePageItems/Header/Header';
import Footer from '../../components/HomePageItems/Footer/HomePageFooter';
import { MOCK_PRODUCTS } from '../../components/Data/dataProduct';
import { STORES } from '../../components/Data/stores';
import SuccessModal from '../../components/Modal/SuccessModal/SuccessModal';
import { useCart } from '../../../context/CartContext';

import ShipTabs from '../../components/checkout/ShipTabs';
import AddressForm from '../../components/checkout/AddressForm';
import PickupStoreList from '../../components/checkout/PickupStoreList';
import ShipMethods from '../../components/checkout/ShipMethods';
import PaymentMethods from '../../components/checkout/PaymentMethods';
import NoteBox from '../../components/checkout/NoteBox';
import OrderItems from '../../components/checkout/OrderItems';
import VnpayQR from '../../components/checkout/VnpayQR';
import Summary from '../../components/checkout/Summary';

import { useDeliveryState } from '../../../hooks/useDeliveryState';
import { useStoresEligibility } from '../../../hooks/useStoresEligibility';

// üÜï L·∫•y user ƒë√£ l∆∞u (localStorage)
import { getUser } from '../../../utils/storage';

const SHIP_METHODS = [
  { id: 'economy', name: 'Ti·∫øt ki·ªám', eta: '2‚Äì4 ng√†y', fee: 15000 },
  { id: 'standard', name: 'Nhanh', eta: '24‚Äì48 gi·ªù', fee: 30000 },
  { id: 'express', name: 'H·ªèa t·ªëc', eta: '2‚Äì4 gi·ªù (n·ªôi th√†nh)', fee: 80000 },
];

export default function Checkout() {
  const navigate = useNavigate();
  const { cartItems, subtotal, clearCart } = useCart();

  const [showSuccess, setShowSuccess] = useState(false);
  const { mode, setMode, shipMethod, setShipMethod, delivery } =
    useDeliveryState();

  const [form, setForm] = useState({
    name: '',
    phone: '',
    email: '',
    country: 'Vietnam',
    address: '',
    district: '',
    method: 'cod', // cod | onpay-atm | onpay-visa | onpay-installment
    note: '',
  });

  // üÜï T·ª± load th√¥ng tin c√° nh√¢n t·ª´ user l∆∞u trong localStorage
  useEffect(() => {
    const u = getUser?.();
    if (!u) return;

    // Chu·∫©n ho√° c√°c field hay g·∫∑p trong d·ª± √°n
    const fullName = u.fullName || u.name || '';
    const email = u.email || '';
    const phone = u.phone || u.phoneNumber || '';
    // address c√≥ th·ªÉ l√† string ho·∫∑c object { address, district, country }
    const addrObj =
      typeof u.address === 'object' && u.address !== null
        ? u.address
        : { address: u.address || '' };

    setForm((prev) => ({
      ...prev,
      name: prev.name || fullName,
      email: prev.email || email,
      phone: prev.phone || phone,
      address: prev.address || addrObj.address || addrObj.street || '',
      district: prev.district || addrObj.district || addrObj.ward || '',
      country: prev.country || addrObj.country || 'Vietnam',
    }));
  }, []);

  // C·ª≠a h√†ng ƒë·ªß t·ªìn kho khi nh·∫≠n t·∫°i c·ª≠a h√†ng
  const { eligibleStores } = useStoresEligibility(cartItems, STORES);
  const [storeId, setStoreId] = useState('');
  const pickedStore = useMemo(
    () => eligibleStores.find((s) => s.id === storeId),
    [eligibleStores, storeId],
  );

  // Ph√≠ ship + t·ªïng
  const shipFee = useMemo(
    () =>
      mode === 'pickup'
        ? 0
        : SHIP_METHODS.find((m) => m.id === shipMethod)?.fee || 0,
    [mode, shipMethod],
  );
  const total = useMemo(() => subtotal + shipFee, [subtotal, shipFee]);

  // VNPay demo
  const payIsOnline = ['onpay-atm', 'onpay-visa'].includes(form.method);
  const [orderId] = useState(() => `MM${Date.now()}`);
  const orderInfo = `Thanh toan don ${orderId}`;
  const vnpayPayload = `VNPAY|ORDER=${orderId}|AMOUNT=${total}|INFO=${orderInfo}`;
  const qrUrl = `https://api.qrserver.com/v1/create-qr-code/?size=240x240&data=${encodeURIComponent(
    vnpayPayload,
  )}`;
  const [showQR, setShowQR] = useState(false);
  const [paid, setPaid] = useState(false);

  // ƒê·∫∑t h√†ng
  const placeOrder = () => {
    if (cartItems.length === 0) {
      alert('Gi·ªè h√†ng tr·ªëng.');
      navigate('/cart');
      return;
    }

    if (mode === 'delivery') {
      if (!form.name || !form.phone || !form.address || !form.district) {
        alert('Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin giao h√†ng!');
        return;
      }
    } else {
      if (!storeId) {
        alert('Vui l√≤ng ch·ªçn c·ª≠a h√†ng ƒë·ªÉ nh·∫≠n!');
        return;
      }
    }

    // Thanh to√°n online: l·∫ßn 1 hi·ªÉn th·ªã QR, l·∫ßn 2 y√™u c·∫ßu ƒë√£ thanh to√°n
    if (payIsOnline) {
      if (!showQR) {
        setShowQR(true);
        return;
      }
      if (!paid) {
        alert("Vui l√≤ng qu√©t QR VNPay v√† b·∫•m 'T√¥i ƒë√£ thanh to√°n' ƒë·ªÉ ti·∫øp t·ª•c.");
        return;
      }
    }

    // Ho√†n t·∫•t ƒë∆°n (demo)
    clearCart();
    setShowSuccess(true);
  };

  return (
    <div className={styles.page}>
      <Header products={MOCK_PRODUCTS} />

      <main className={styles.main}>
        <div className={styles.container}>
          <h2 className={styles.brand}>
            My Music <span>Shop</span>
          </h2>

          <div className={styles.grid}>
            {/* LEFT */}
            <section className={styles.left}>
              <div className={styles.box}>
                <ShipTabs mode={mode} onChange={setMode} />

                {mode === 'delivery' ? (
                  <AddressForm form={form} setForm={setForm} />
                ) : (
                  <PickupStoreList
                    stores={eligibleStores}
                    cartItems={cartItems}
                    storeId={storeId}
                    setStoreId={setStoreId}
                  />
                )}
              </div>

              <div className={styles.box}>
                <div className={styles.boxTitle}>Ph∆∞∆°ng th·ª©c giao h√†ng</div>
                <ShipMethods
                  visible={mode === 'delivery'}
                  methods={SHIP_METHODS}
                  shipMethod={shipMethod}
                  setShipMethod={setShipMethod}
                />
              </div>

              <div className={styles.box}>
                <div className={styles.boxTitle}>Ph∆∞∆°ng th·ª©c thanh to√°n</div>
                <PaymentMethods
                  method={form.method}
                  setMethod={(m) => setForm({ ...form, method: m })}
                  onSwitch={() => {
                    // reset khi ƒë·ªïi ph∆∞∆°ng th·ª©c thanh to√°n
                    setPaid(false);
                    setShowQR(false);
                  }}
                />
              </div>

              <NoteBox
                value={form.note}
                onChange={(v) => setForm({ ...form, note: v })}
              />
            </section>

            {/* RIGHT */}
            <aside className={styles.right}>
              <OrderItems items={cartItems} />

              <div className={styles.delivery}>
                {mode === 'delivery' ? (
                  <>
                    <span>Delivery Time :</span>{' '}
                    <b>
                      {delivery
                        ? `${delivery.dateLabel} ${delivery.timeSlot}`
                        : 'Ch∆∞a ch·ªçn (h√£y x√°c nh·∫≠n ·ªü Gi·ªè h√†ng)'}
                    </b>
                  </>
                ) : (
                  <>
                    <span>Pickup at :</span>{' '}
                    <b>
                      {pickedStore
                        ? `${pickedStore.name} ‚Äì ${pickedStore.address}`
                        : 'Ch∆∞a ch·ªçn c·ª≠a h√†ng'}
                    </b>
                  </>
                )}
              </div>

              <VnpayQR
                visible={payIsOnline}
                showQR={showQR}
                setShowQR={setShowQR}
                paid={paid}
                setPaid={setPaid}
                orderId={orderId}
                total={total}
                orderInfo={orderInfo}
                qrUrl={qrUrl}
              />

              <div className={styles.couponBox}>
                <div className={styles.cartTitle}>M√£ khuy·∫øn m√£i</div>
                <div className={styles.couponRow}>
                  <input
                    className={styles.input}
                    placeholder='Nh·∫≠p m√£ khuy·∫øn m√£i'
                  />
                  <button className={styles.grayBtn}>√Åp d·ª•ng</button>
                </div>
              </div>

              <Summary
                subtotal={subtotal}
                shipFee={shipFee}
                total={total}
                onPlace={placeOrder}
              />
            </aside>
          </div>
        </div>
      </main>

      <Footer />

      {/* Modal th√†nh c√¥ng */}
      <SuccessModal
        open={showSuccess}
        onClose={() => {
          setShowSuccess(false);
          navigate('/');
        }}
        onContinue={() => {
          setShowSuccess(false);
          navigate('/productsCategory');
        }}
      />
    </div>
  );
}
